<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小技巧 - 如何在百度搜索到自己的网站？</title>
      <link href="/2025/08/02/Baidu/"/>
      <url>/2025/08/02/Baidu/</url>
      
        <content type="html"><![CDATA[<style>    /* 修改终端容器样式 */.terminal {    background: rgba(239, 241, 243, 0.9);    border-radius: 12px;    padding: 20px;    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);    border: 1px solid rgba(0, 0, 0, 0.1);    margin-bottom: 30px;    width: 100%;}/* 修改标题行样式 */.terminal-header {    display: flex;    align-items: center;    margin-bottom: 15px;    gap: 10px;    flex-wrap: nowrap;}/* 修改标题容器 */.title-container {    display: flex;    align-items: center;    gap: 10px;    flex-grow: 1;}/* 修改标题样式 */.terminal-title {    font-size: 1.2rem;    font-weight: 600;    color: #333;    display: flex;    align-items: center;}/* 修改刷新按钮 */.refresh-btn {    border: none;    background: transparent;    width: 28px;    height: 28px;    display: flex;    align-items: center;    justify-content: center;    cursor: pointer;    color: #666;}/* 修改进度容器 */.progress-container {    display: flex;    align-items: center;    gap: 8px;    padding: 0;    color: #666;    font-size: 0.9rem;}/* 修改进度条 */.progress-indicator {    width: 80px;    height: 4px;    background: rgba(0, 0, 0, 0.1);    border-radius: 2px;    overflow: hidden;}.progress-bar {    height: 100%;    background: #0072ff;    width: 0%;    transition: width 0.3s ease;}/* 修改正文区域 */.terminal-body {    min-height: auto;    padding: 15px;    background: transparent;    border-radius: 6px;    border: none;    font-family: inherit;    font-size: 16px;    line-height: 1.6;    text-align: left;    color: #333;    display: block;}/* 修改光标样式 */.cursor {    display: inline-block;    width: 2px;    height: 1.2em;    position: relative;    animation: blink 1s infinite;    vertical-align: middle;    background: rgb(152 163 173 / 90%); /* 绿色光标 */    }.typewriter-text {    display: inline;    position: relative;}/* 打字完成后的光标状态 */.cursor.completed {    display: none;}/* 光标闪烁动画 */@keyframes blink {    0%, 100% { opacity: 1; }    50% { opacity: 0.3; }}/* 移除控制按钮 */.terminal-controls {    display: none;}</style><div class="container">       <div class="terminal">        <div class="terminal-header">            <div class="title-container">                <i class="anzhiyufont anzhiyu-icon-bilibili"></i>                <div class="terminal-title">AI-摘要</div>                <div class="refresh-btn" id="refreshBtn">                    <i class="anzhiyufont anzhiyu-icon-arrow-rotate-right"></i>                </div>            </div>             <div class="progress-container">                <div class="jdu">进度: <span id="progress">0%</span></div>                <div class="progress-indicator">                    <div class="progress-bar" id="progressBar"></div>                </div>            </div>        </div>             <div class="terminal-body">            <div id="typewriter" class="typewriter-text"></div>            <span class="cursor"></span>        </div>    </div></div><script>    // 打字机状态管理    let typewriterTimeout = null;    let checkInterval = null;    let isTyping = false;    let currentText = "";    // 初始化打字机    function initTypewriter() {        // 确保DOM元素存在        if (!document.getElementById('typewriter') ||             !document.getElementById('progress') ||             !document.getElementById('progressBar')) {            setTimeout(initTypewriter, 100);            return;        }        // 设置文本内容        currentText = "本文介绍如何通过提交网址至百度等搜索引擎，加速网站收录过程。只需在百度搜索资源平台提交首页URL，即可实现快速收录，便于查询网站收录状态。";                // 启动定时检查        startProgressChecker();    }    // 启动进度检查器    function startProgressChecker() {        // 先清除已有的检查器        stopProgressChecker();                // 每500毫秒检查一次进度        checkInterval = setInterval(function() {            const progressElement = document.getElementById('progress');            if (progressElement && progressElement.textContent === "0%" && !isTyping) {                startTyping();            }        }, 500);    }    // 停止进度检查器    function stopProgressChecker() {        if (checkInterval) {            clearInterval(checkInterval);            checkInterval = null;        }    }    // 重置打字机状态    function resetTypewriter() {        clearTimeout(typewriterTimeout);        document.getElementById('typewriter').textContent = "";        document.getElementById('progress').textContent = "0%";        document.getElementById('progressBar').style.width = "0%";        const cursor = document.querySelector('.cursor');        if (cursor) {            cursor.style.display = 'inline-block';            cursor.classList.remove('completed');        }        isTyping = false;                // 重置后重新启动检查器        startProgressChecker();    }    // 开始打字效果    function startTyping() {        // 打字前停止检查器        stopProgressChecker();                if (isTyping) return;                const typewriterElement = document.getElementById('typewriter');        const progressElement = document.getElementById('progress');        const progressBar = document.getElementById('progressBar');        const cursor = document.querySelector('.cursor');                let charIndex = 0;        isTyping = true;        function typeCharacter() {            if (charIndex < currentText.length) {                // 更新文本内容（确保光标在最后）                typewriterElement.textContent = currentText.substring(0, charIndex + 1);                                // 更新进度                const progress = Math.floor((charIndex + 1) / currentText.length * 100);                progressElement.textContent = progress + "%";                progressBar.style.width = progress + "%";                                charIndex++;                                // 随机速度变化                const randomSpeed = 80 + Math.random() * 40;                typewriterTimeout = setTimeout(typeCharacter, randomSpeed);            } else {                // 打字完成                if (cursor) {                    cursor.style.display = 'none';                    cursor.classList.add('completed');                }                isTyping = false;                                // 打字完成后重新启动检查器                startProgressChecker();            }        }                // 开始打字        typeCharacter();    }    // 刷新功能    function handleRefresh() {        if (isTyping) return;                // 重置状态        resetTypewriter();                // 添加旋转动画        const icon = document.querySelector('#refreshBtn i');        if (icon) {            icon.style.transform = "rotate(360deg)";            setTimeout(() => {                icon.style.transform = "";                // 延迟一点开始打字，让旋转动画完成                setTimeout(startTyping, 100);            }, 300);        }    }    // 事件监听    function setupEventListeners() {        // 刷新按钮        const refreshBtn = document.getElementById('refreshBtn');        if (refreshBtn) {            refreshBtn.addEventListener('click', handleRefresh);              progressElement.textContent = 0 + "%";        }                // 页面可见性变化        document.addEventListener('visibilitychange', function() {            if (document.visibilityState === 'visible') {                initTypewriter();            }        });    }    // 初始化    document.addEventListener('DOMContentLoaded', function() {        setupEventListeners();        initTypewriter();    });    // 确保在Turbolinks等情况下也能工作    if (typeof Turbo !== 'undefined') {        document.addEventListener('turbo:load', initTypewriter);    }        // 初始执行    setTimeout(initTypewriter, 300);</script><h3 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法 &#x2F; 步骤"></a>方法 &#x2F; 步骤</h3><p style="text-align:center" id="tf_lgz">1、理论上是百度会自动收录的。但这个收录可能会等很久。所以我采用提交自己的网址来达到快速被百度等搜索引擎收录的效果。</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://ziyuan.baidu.com/linksubmit/url">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://pic.616pic.com/ys_img/00/10/46/PqmDFNEX6p.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">链接直达</div>            <div class="tag-link-sitename">百度</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/New-luo/NewPic@main/imgs/202508021147547.png" alt="打开后，在URL地址旁输入自己的网址,点击"提交""/></div><span class="image-caption">打开后，在URL地址旁输入自己的网址,点击"提交"</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/New-luo/NewPic@main/imgs/202508021149828.png" alt="提交成功后，会弹出一个成功窗口。"/></div><span class="image-caption">提交成功后，会弹出一个成功窗口。</span></div><p>2、当你的网站被百度收录了，你可以在百度中这样来查询。输入site:加上你的网址。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/New-luo/NewPic@main/imgs/202508021151999.png" alt="如图，通过此方法查询网站就已经被百度收录了。"/></div><span class="image-caption">如图，通过此方法查询网站就已经被百度收录了。</span></div><p>希望我的讲解对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新站必看 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo指令集</title>
      <link href="/2025/08/01/hello-hexo/"/>
      <url>/2025/08/01/hello-hexo/</url>
      
        <content type="html"><![CDATA[<style>    /* 修改终端容器样式 */.terminal {    background: rgba(239, 241, 243, 0.9);    border-radius: 12px;    padding: 20px;    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);    border: 1px solid rgba(0, 0, 0, 0.1);    margin-bottom: 30px;    width: 100%;}/* 修改标题行样式 */.terminal-header {    display: flex;    align-items: center;    margin-bottom: 15px;    gap: 10px;    flex-wrap: nowrap;}/* 修改标题容器 */.title-container {    display: flex;    align-items: center;    gap: 10px;    flex-grow: 1;}/* 修改标题样式 */.terminal-title {    font-size: 1.2rem;    font-weight: 600;    color: #333;    display: flex;    align-items: center;}/* 修改刷新按钮 */.refresh-btn {    border: none;    background: transparent;    width: 28px;    height: 28px;    display: flex;    align-items: center;    justify-content: center;    cursor: pointer;    color: #666;}/* 修改进度容器 */.progress-container {    display: flex;    align-items: center;    gap: 8px;    padding: 0;    color: #666;    font-size: 0.9rem;}/* 修改进度条 */.progress-indicator {    width: 80px;    height: 4px;    background: rgba(0, 0, 0, 0.1);    border-radius: 2px;    overflow: hidden;}.progress-bar {    height: 100%;    background: #0072ff;    width: 0%;    transition: width 0.3s ease;}/* 修改正文区域 */.terminal-body {    min-height: auto;    padding: 15px;    background: transparent;    border-radius: 6px;    border: none;    font-family: inherit;    font-size: 16px;    line-height: 1.6;    text-align: left;    color: #333;    display: block;}/* 修改光标样式 */.cursor {    display: inline-block;    width: 2px;    height: 1.2em;    position: relative;    animation: blink 1s infinite;    vertical-align: middle;    background: rgb(152 163 173 / 90%); /* 绿色光标 */    }.typewriter-text {    display: inline;    position: relative;}/* 打字完成后的光标状态 */.cursor.completed {    display: none;}/* 光标闪烁动画 */@keyframes blink {    0%, 100% { opacity: 1; }    50% { opacity: 0.3; }}/* 移除控制按钮 */.terminal-controls {    display: none;}</style><div class="container">       <div class="terminal">        <div class="terminal-header">            <div class="title-container">                <i class="anzhiyufont anzhiyu-icon-bilibili"></i>                <div class="terminal-title">AI-摘要</div>                <div class="refresh-btn" id="refreshBtn">                    <i class="anzhiyufont anzhiyu-icon-arrow-rotate-right"></i>                </div>            </div>             <div class="progress-container">                <div class="jdu">进度: <span id="progress">0%</span></div>                <div class="progress-indicator">                    <div class="progress-bar" id="progressBar"></div>                </div>            </div>        </div>             <div class="terminal-body">            <div id="typewriter" class="typewriter-text"></div>            <span class="cursor"></span>        </div>    </div></div><script>    // 打字机状态管理    let typewriterTimeout = null;    let checkInterval = null;    let isTyping = false;    let currentText = "";    // 初始化打字机    function initTypewriter() {        // 确保DOM元素存在        if (!document.getElementById('typewriter') ||             !document.getElementById('progress') ||             !document.getElementById('progressBar')) {            setTimeout(initTypewriter, 100);            return;        }        // 设置文本内容        currentText = "本文提供了一份常用Hexo指令的详细说明，Hexo是一款流行的静态博客生成器。文章依次介绍了创建项目、文章、生成静态文件、启动本地服务器、部署网站等常用命令，并解释了每个命令后的可选参数。还包括了清除缓存文件、查看Hexo版本等维护命令。作者强调了Hexo的差分机制，即仅重新生成改动的文件以提高效率，并提醒用户在部署前确保已生成最新静态文件。文章最后汇总了Hexo操作的三件套命令：hexo clean && hexo g && hexo s，用于清除缓存、生成文件和启动服务器，从而快速启动本地博客服务。";                // 启动定时检查        startProgressChecker();    }    // 启动进度检查器    function startProgressChecker() {        // 先清除已有的检查器        stopProgressChecker();                // 每500毫秒检查一次进度        checkInterval = setInterval(function() {            const progressElement = document.getElementById('progress');            if (progressElement && progressElement.textContent === "0%" && !isTyping) {                startTyping();            }        }, 500);    }    // 停止进度检查器    function stopProgressChecker() {        if (checkInterval) {            clearInterval(checkInterval);            checkInterval = null;        }    }    // 重置打字机状态    function resetTypewriter() {        clearTimeout(typewriterTimeout);        document.getElementById('typewriter').textContent = "";        document.getElementById('progress').textContent = "0%";        document.getElementById('progressBar').style.width = "0%";        const cursor = document.querySelector('.cursor');        if (cursor) {            cursor.style.display = 'inline-block';            cursor.classList.remove('completed');        }        isTyping = false;                // 重置后重新启动检查器        startProgressChecker();    }    // 开始打字效果    function startTyping() {        // 打字前停止检查器        stopProgressChecker();                if (isTyping) return;                const typewriterElement = document.getElementById('typewriter');        const progressElement = document.getElementById('progress');        const progressBar = document.getElementById('progressBar');        const cursor = document.querySelector('.cursor');                let charIndex = 0;        isTyping = true;        function typeCharacter() {            if (charIndex < currentText.length) {                // 更新文本内容（确保光标在最后）                typewriterElement.textContent = currentText.substring(0, charIndex + 1);                                // 更新进度                const progress = Math.floor((charIndex + 1) / currentText.length * 100);                progressElement.textContent = progress + "%";                progressBar.style.width = progress + "%";                                charIndex++;                                // 随机速度变化                const randomSpeed = 80 + Math.random() * 40;                typewriterTimeout = setTimeout(typeCharacter, randomSpeed);            } else {                // 打字完成                if (cursor) {                    cursor.style.display = 'none';                    cursor.classList.add('completed');                }                isTyping = false;                                // 打字完成后重新启动检查器                startProgressChecker();            }        }                // 开始打字        typeCharacter();    }    // 刷新功能    function handleRefresh() {        if (isTyping) return;                // 重置状态        resetTypewriter();                // 添加旋转动画        const icon = document.querySelector('#refreshBtn i');        if (icon) {            icon.style.transform = "rotate(360deg)";            setTimeout(() => {                icon.style.transform = "";                // 延迟一点开始打字，让旋转动画完成                setTimeout(startTyping, 100);            }, 300);        }    }    // 事件监听    function setupEventListeners() {        // 刷新按钮        const refreshBtn = document.getElementById('refreshBtn');        if (refreshBtn) {            refreshBtn.addEventListener('click', handleRefresh);              progressElement.textContent = 0 + "%";        }                // 页面可见性变化        document.addEventListener('visibilitychange', function() {            if (document.visibilityState === 'visible') {                initTypewriter();            }        });    }    // 初始化    document.addEventListener('DOMContentLoaded', function() {        setupEventListeners();        initTypewriter();    });    // 确保在Turbolinks等情况下也能工作    if (typeof Turbo !== 'undefined') {        document.addEventListener('turbo:load', initTypewriter);    }        // 初始执行    setTimeout(initTypewriter, 300);</script><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://hexo.io/zh-cn/docs/commands.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://hexo.io/logo.svg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">前往HEXO官方指令教程</div>            <div class="tag-link-sitename">Hexo</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h1 id="常用hexo指令"><a href="#常用hexo指令" class="headerlink" title="常用hexo指令"></a>常用hexo指令</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建一个hexo项目。如果没有设置 folder ，Hexo 默认在当前的文件目录下建立项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p>创建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>参数 描述<br>-p, –path 自定义新文章的路径<br>-r, –replace 如果存在同名文章，将其替换<br>-s, –slug 文章的 Slug，作为新文章的文件名和发布后的 URL<br>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;Hello Hexo&quot;</span></span><br></pre></td></tr></table></figure><p>此时会创建 source&#x2F;_posts&#x2F;Hello Hexo.md，同时 Hello Hexo.md 的 Front Matter 中的 title 为 “Hello Hexo”。这是因为在上述命令中，hexo-cli 将 Hello Hexo 视为指定文章的标题、并采用默认的 layout。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new about/me</span><br></pre></td></tr></table></figure><p>此时会创建 source&#x2F;_posts&#x2F;about&#x2F;Hello Hexo.md，同时 Hello Hexo.md 的 Front Matter 中的 title 为 “Hello Hexo”。这是因为在上述命令中，hexo-cli 将 Hello Hexo 视为指定文章的标题、并采用默认的 layout。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me <span class="string">&quot;About me&quot;</span></span><br></pre></td></tr></table></figure><p>此时会创建一个 source&#x2F;about&#x2F;me.md 文件，同时 Front Matter 中的 title 为 “About me”</p><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>参数 描述<br>-d, –deploy 文件生成后立即部署网站<br>-w, –watch 监视文件变动<br>-b, –bail 生成过程中如果发生任何未处理的异常则抛出异常<br>-f, –force 强制重新生成文件<br>-c, –concurrency 最大同时生成文件的数量，默认无限制<br>Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。<br>使用该参数的效果接近 hexo clean &amp;&amp; hexo generate<br>生成前需清除缓存文件，如果你这么做并不能达到你的目的<br>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="启动本地服务器浏览网站"><a href="#启动本地服务器浏览网站" class="headerlink" title="启动本地服务器浏览网站"></a>启动本地服务器浏览网站</h2><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/">http://localhost:4000/</a><br>选项 描述<br>-p, –port 重设端口<br>-s, –static 只使用静态文件<br>-l, –log 启动日记记录，使用覆盖记录格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><p>部署前需确保已生成最新的静态文件，如果你这么做并不能达到你的目的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h2><p>生成静态文件前需确保已清除缓存文件，如果你这么做并不能达到你的目的<br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h2 id="查看Hexo版本"><a href="#查看Hexo版本" class="headerlink" title="查看Hexo版本"></a>查看Hexo版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h2 id="Hexo三件套"><a href="#Hexo三件套" class="headerlink" title="Hexo三件套"></a>Hexo三件套</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello August</title>
      <link href="/2025/08/01/hello-August/"/>
      <url>/2025/08/01/hello-August/</url>
      
        <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>八月，你好！愿你在接下来的日子里，带来更多的惊喜与美好，让我们在你的怀抱中，收获成长，收获幸福，收获属于自己的精彩篇章。</p></div>]]></content>
      
      
      <categories>
          
          <category> Hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> August </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习Vue</title>
      <link href="/2025/07/30/vue/"/>
      <url>/2025/07/30/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>1.创建一个表单并添加一个文件输入控件，例如使用input type&#x3D;”file”元素。<br>2.监听文件选择事件，获取用户选择的文件，并将其存储在Vue组件的data属性中。<br>3.通过FormData（表单数据对象）来构造包含上传文件的表单数据。<br>4.发送POST请求到服务器，携带表单数据，以此来完成文件上传操作。<br>后端，我们使用了Spring Boot框架和Spring MVC来处理文件上传。通过@RequestParam注解来获取上传的文件，MultipartFile对象包含了文件的各种信息和操作方法。我们使用getBytes()方法获取文件的字节数组，然后使用Files.write()方法将文件写入目标路径。</p><h3 id="vue封装数据发送后台"><a href="#vue封装数据发送后台" class="headerlink" title="vue封装数据发送后台"></a>vue封装数据发送后台</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 可以使用将数据转换为JSON格式或者使用FormData对象封装数据(键值对)键对应后台的实体类,值前端要传入后台的值</span><br><span class="line">  JSON: const data = &#123; name: <span class="string">&#x27;John&#x27;</span>, age: 25 &#125;;</span><br><span class="line">  JSON.stringify(data) </span><br><span class="line"> </span><br><span class="line">  FormData: const formData = new FormData(); </span><br><span class="line">  formData.append(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;John&#x27;</span>); </span><br><span class="line">  formData.append(<span class="string">&#x27;age&#x27;</span>, 25);</span><br></pre></td></tr></table></figure><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><p>1.beforeCreate：实例刚被创建，数据观测和事件配置之前，此时无法访问到data和methods等实例属性。<br>2.created：实例已经被创建，数据观测和事件配置完成，此时可以访问到data和methods等实例属性，但未挂载到DOM上。<br>3.beforeMount：在挂载开始之前被调用，此时模板编译已完成，但DOM还未生成。<br>4.mounted：实例已经挂载到DOM上，此时可以对DOM进行操作，访问到挂载的元素。<br>5.beforeUpdate：数据更新时，重新渲染之前被调用，此时数据已经更新，但DOM尚未重新渲染。<br>6.updated：数据更新并且DOM重新渲染完成后被调用。<br>7.beforeDestroy：实例销毁之前被调用，此时实例仍然完全可用。<br>8.destroyed：实例销毁后被调用，此时实例及其所有的事件监听器和观察者都被移除。<br>9.beforeCreate和created钩子函数会在组件实例化之前执行；<br>10.beforeDestroy和destroyed钩子函数会在组件销毁之前执行。</p><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello July</title>
      <link href="/2025/07/30/hello-world/"/>
      <url>/2025/07/30/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>七月，你好！愿你在热烈的阳光下，绽放出属于自己的光彩；愿你在生活的舞台上，尽情演绎属于自己的精彩；愿你在梦想的道路上，一路披荆斩棘，走向成功的彼岸。</p></div>]]></content>
      
      
      <categories>
          
          <category> Hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> July </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
